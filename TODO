Here's a list of TODO items / ideas in no particular order.


Improvements to LayoutListView:

* Implement column width size as specified in the glom file.

* Add support for LayoutItem_Text, LayoutItem_Button and LayoutItem_Image items.

* Make width of the CellTable used for the LayoutList consistent between the
  tables so that the UI doesn't appear to jump around. One way to do this is to
  find the width of the largest table and enlarge the column widths
  proportionally in the smaller tables. Of course this will not respect the
  column widths specified in the glom file. Another option is to pad the smaller
  tables with empty columns at the end so that the line under the headers extends to
  the end of the largest table. Some experimentation is required to see which option
  is the best.

* Only the cell backgrounds are coloured which leaves a gap between the cells that
  isn't coloured. I need to figure out a way to set 'style=background-colour:'
  on the whole column rather than just the cell.

* Use ColumnInfo rpc object to send text background and foreground colours
  instead of sending this information for each cell.


Improvements to LayoutDetailsView:

* This hasn't been started yet.


Currency formatting:

The default Java currency formatting uses the currency symbol (€, $, etc) for
the the currency used in the specified country and the currency code (EUR, USD,
etc) for currencies used outside of the specified country. For example, when
using en_CA (English Canada) with CAD (Canadian Dollars), the number 5.89 is
represented as "$5.89". With EUR, the same number is represented as "EUR5.89"
which is not what is expected. We should get either "€5.89" or "EUR 5.89".
Obviously Java is just replacing the currency symbol with the currency code for
currencies outside of the specified country. This might be a bug in Java which
should be reported to the openjdk project if required. Regardless if it's a bug
or not, it should be possible to work around this by using custom formatting
strings when we implement a preference for setting locale.


Servlet:

* Test memory usage before and after we execute the query that would result in
  a large ResultSet.  We need to ensure that the JDBC driver is in fact
  returning a cursor based result set that has a low memory footprint. Check
  the difference between this value before and after the query:

  Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()

  See the TODO item about this in
  src/main/java/org/glom/web/server/OnlineGlomServiceImpl.java.

* Create a memory and time efficient way to get the row count. Right now the
  ResultSet is not being returned in cursor mode because we're using
  TYPE_SCROLL_INSENSITIVE to able to seek to the last record of the ResultSet.
  The PostgreSQL JDBC driver doesn't support moving around in the ResultSet
  when in cursor mode.  Here's the relevant PostgreSQL documentation:

  http://jdbc.postgresql.org/documentation/83/query.html#query-with-cursor

  An option might be to do a SELECT COUNT query using a method in libglom or a
  custom method in java-libglom to build the query.

  See: https://bugzilla.gnome.org/show_bug.cgi?id=645110
